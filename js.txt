document.getElementById('').innerHtml, innerText, src, syle.fontsize, display, background, 
document.body.style.background='yellow'

js function is a block of js code
if script is going to place in head make sure to add defer attri which will make sure that js is applied after all html code i.e all elements are loaded
Also placing script at the bottom of the body element improves the display speedas script interpretation slows down the display

external js file cn speed up pg loads as its cached

JavaScript Display Possibilities
JavaScript can "display" data in different ways:

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().------------Using document.write() after an HTML document is loaded, will delete all existing HTML:
Writing into an alert box, using window.alert().-----------In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional---alert('')
Writing into the browser console, using console.log().

The only exception is that you can call the window.print() method in the browser to print the content of the current window.

In js prgms r executed by web browser

js statements are omposed of: values, operators, expressions, 
keywords: var- declare variable, let- block variable, const- block variable, if- block of statements to be executed on a condition, switch- block of statements to be executed in different cases, for- block of statements to be executed in a loop, function, return- Exits a function, try-Implements error handling to a block of statements
JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.
and comments


curly braces r the code block which defines statements to be executed together--functions


Syntax:
The JavaScript syntax defines two types of values:
Fixed values - Literals.
Variable values - Variables.


js variable
Variables defined with let cannot be Redeclared.
Variables defined with let must be Declared before use.
Variables defined with let have Block Scope.

Redeclaring Variables
Redeclaring a variable using the var keyword can impose problems.
Redeclaring a variable inside a block will also redeclare the variable outside the block:
var x = 2;   // Allowed
let x = 3;   // Not allowed

{
let x = 2;   // Allowed
let x = 3;   // Not allowed
}

{
let x = 2;   // Allowed
var x = 3;   // Not allowed
}
let x = 2;   // Allowed

{
let x = 3;   // Allowed
}

{
let x = 4;    // Allowed
}
Variables defined with var are hoisted to the top and can be initialized at any time.
Meaning: You can use the variable before it is declared:
Example carName = "Volvo";
var carName;

Variables defined with const cannot be Redeclared.
Variables defined with const cannot be Reassigned.
Variables defined with const have Block Scope.
It does not define a constant value. It defines a constant reference to a value.

Because of this you can NOT:

Reassign a constant value
Reassign a constant array
Reassign a constant object
But you CAN:

Change the elements of constant array
Change the properties of constant object

Arithmetic operators
+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation (ES2016)---x ** y produces the same result as Math.pow(x,y):let z = Math.pow(x,2);  
/	Division
%	Modulus (Division Remainder)
++	Increment
--	Decrement
Precedence is left to right: 1st * or / then + or -

Precedence chart
Value	Operator	Description	Example
21	( )	Expression grouping	(3 + 4)
 	 	 	 
20	.	Member	person.name
20	[]	Member	person["name"]
20	()	Function call	myFunction()
20	new	Create	new Date()
 	 	 	 
18	++	Postfix Increment	i++
18	--	Postfix Decrement	i--
 	 	 	 
17	++	Prefix Increment	++i
17	--	Prefix Decrement	--i
17	!	Logical not	!(x==y)
17	typeof	Type	typeof x
 	 	 	 
16	**	Exponentiation (ES2016)	10 ** 2
 	 	 	 
15	*	Multiplication	10 * 5
15	/	Division	10 / 5
15	%	Division Remainder	10 % 5
 	 	 	 
14	+	Addition	10 + 5
14	-	Subtraction	10 - 5
 	 	 	 
13	<<	Shift left	x << 2
13	>>	Shift right	x >> 2
13	>>>	Shift right (unsigned)	x >>> 2
 	 	 	 
12	<	Less than	x < y 
12	<=	Less than or equal	x <= y
12	>	Greater than	x > y
12	>=	Greater than or equal	x >= y
12	in	Property in Object	"PI" in Math
12	instanceof	Instance of Object	instanceof Array
 	 	 	 
11	==	Equal	x == y
11	===	Strict equal	x === y
11	!=	Unequal	x != y
11	!==	Strict unequal	x !== y
 	 	 	 
10	&	Bitwise AND	x & y
9	^	Bitwise XOR	x ^ y
8	|	Bitwise OR	x | y
7	&&	Logical AND	x && y
6	||	Logical OR	x || y
5	??	Nullish Coalescing	x ?? y
4	? :	Condition	? "Yes" : "No"
 	 	 	 
3	+=	Assignment	x += y
3	/=	Assignment	x /= y
3	-=	Assignment	x -= y
3	*=	Assignment	x *= y
3	%=	Assignment	x %= y
3	<<=	Assignment	x <<= y
3	>>=	Assignment	x >>= y
3	>>>=	Assignment	x >>>= y
3	&=	Assignment	x &= y
3	^=	Assignment	x ^= y
3	|=	Assignment	x |= y
 	 	 	 
2	yield	Pause Function	yield x
1	,	Comma	5 , 6

Assignment Operaotrs
Operator	Example	Same As
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
**=	x **= y	x = x ** y

Comparison operator

Operator	Description
==	equal to
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type
>	greater than
<	less than
>=	greater than or equal to
<=	less than or equal to
?	ternary operator

Logical Operator

Operator	Description
&&	logical and
||	logical or
!	logical not

Type Operators

Operator	Description
typeof	Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Bitwise Operator
Bit operators work on 32 bits numbers.

Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.

.map()
 numbers = [1, 4, 9, 16] => [2, 8, 18, 32]
function multiplyTwo(numbers) {
  return numbers.map(x => x*2)
}
.filter
const words = ["thaw", "achievement", "gain", "outlet", "difference"] => ["thaw", "gain"]
function wordLessfive(words){  
  return words.filter(word => word.length < 5)
}

Functions:
there two ways of defining functions with keyword function:
1.function declaration: function name(param){code} ----- semicolons are not used as it's not an executable statement

2.function expression: const x = function (param){code} 
here function is anonymous i.e without name and can be invoked using variable name 
this function ends wid a semicolon as it's a part of an executable statement

Also function can be defined using Function() constructor
const name = new function("a", "b", "return a*b");
name(4,3)
function constructor is same as function expression

hoisting applies to variable and function declaration, therfore functions can be called before declaring

self- invoking function: is executed automatically if the expression is folllowed by ().
function declaration cant be self invoked
parentheses is added around the function to indicate that it's a function expression:
(function (x) {
  document.getElementById("demo").innerHTML = "Hello! I called myself" + x;
})("xa"); -------- anonymous self-invoking function(function without name)

Functions can be used as values:
function myFunction(a, b) {
return a+b;
}
let x = myFunction(4+2);

Functions can be used in expressions:
function myfunction(a, b){
return a+b;
}
let x= myfunction(2,9) * 3;


Functions are Objects:
js functions have both properties and methods
the argument.length property returns the number of arguments received when the function was invoked
function myFunction(a, b, c) {
  return arguments.length;
}
document.getElementById("demo").innerHTML = myFunction(4, 3);
o/p: 2 as it only reieved 2 arguments

toString() method returns the function as string
function myFunction(a, b) {
  return a * b;
}

let text = myFunction.toString();
o/p: function myFunction(a, b) { return a * b; }


Note:
A function defined as the property of an object, is called a method to the object.
A function designed to create new objects, is called an object constructor.

Arrow functions:
function & return(optionally) keyword & curly braces(optionally) not req.
for single parameter:
x => x+ 100 
without parameter:
() => "Helo"
 (x,y) => x*y or 
if we want to store function value in variable then:
const z = (x, y) => x+y
don't have this. and not suited for object methods
not hoisted i.e. must be used before defining
using const is safer than using var as function expression is always constant value
return keyword and curly braces are only ignore incase of single statement if we want we can use it for single statements also:
(x, y) => {return x*Y}

x => {
	const a = 1;
	return a + x;
}

(x, y) => {
	const a = 1;
	return a + x + y;
}



Function Parameters
this are names defined in function defintion 
function arguments are values passed to the function
data types of parametes are not specified in fxn definitions
don't perform type checking on the passed arguments
don't check the number of arguments received
It's safe to declare default parameters incase of missing parameters

the Argument Object is a built-in object, it contains an array of the arguments used when the function was called(invoked)
function sumAll() {
  let sum = 0;
  for(let i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }
  return sum;
}
document.getElementById("demo").innerHTML = sumAll(1, 123, 500, 115, 44, 88);

If a function is called with too many arguments (more than declared), these arguments can be reached using the arguments object.
If a function changes an argument's value, it does not change the parameter's original value.

Changes to arguments are not visible (reflected) outside the function.
If a function changes an object property, it changes the original value.

Changes to object properties are visible (reflected) outside the function.



Function Invocation
this keyword refers to an object 
in an object method, this refers to the object 
const myObject = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}
myObject.fullName();
alone this refers to the global object
in a function, this refers to the global object
in a function in strict mode this is undefined
in aevent this refers to the element that received the event
methods like call(), apply(), and bind() can refer this to any object

// This is a function constructor:
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName  = arg2;
}

// This creates a new object
const myObj = new myFunction("John", "Doe");

// This will return "John"
myObj.firstName;
A constructor invocation creates a new object. The new object inherits the properties and methods from its constructor.
The this keyword in the constructor does not have a value.
The value of this will be the new object created when the function is invoked.

Function Call
With call(), an object can use a method belonging to another object.
const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
const person1 = {
  firstName:"John",
  lastName: "Doe"
}
const person2 = {
  firstName:"Mary",
  lastName: "Doe"
}
document.getElementById("demo").innerHTML = person.fullName.call(person1); 
o/p: John Doe

call() with arguments:
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

const person2 = {
  firstName:"Mary",
  lastName: "Doe"
}

document.getElementById("demo").innerHTML = person.fullName.call(person1, "Oslo", "Norway"); 

Function Apply
With the apply() method, you can write a method that can be used on different objects.
In this example the fullName method of person is applied on person1:
const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person1 = {
  firstName: "Mary",
  lastName: "Doe"
}

// This will return "Mary Doe":
person.fullName.apply(person1);

The difference is:
The call() method takes arguments separately.
The apply() method takes arguments as an array.
apply() with arguments
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.apply(person1, ["Oslo", "Norway"]);

Since JavaScript arrays do not have a max() method apply() can be used
Math.max.apply(null, [1,2,3]); //will return 3
Math.max.apply([1,2,3]); //will return 3
Math.max.apply(" ", [1,2,3]); //will return 3
Math.max.apply(0, [1,2,3]); //will return 3

In JavaScript strict mode, if the first argument of the apply() method is not an object, it becomes the owner (object) of the invoked function. 
In "non-strict" mode, it becomes the global object.


Function Bind: an object borrow a method from another object
const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);

Function Closures

Troubleshooting
Errors:
TypeError: "x" is not a function
1. typo error in writing function
2. null value caused due to ref error
3. function called on wrong object. i.e. object not having the method called on it
4. function shares a name with apre-existing property

Null - points to nonexistent or invalid object or address
even though null is primitive value, typeof null returns object

primitive data types- data that is not an object and has no methods or properties: string, numbers, boolean, null. symbol, bigint, undefined

TypeError: "x" is (not) "y"
occurs when there was an unexpected type. eg. undefined or null

SyntaxError: missing ; before statement
1. unescaped strings eg. const foo = 'Tom's bar'; ->const foo = "Tom's bar"; or const foo = 'Tom\'s bar';
2. Declaring properties with var: properties of var can't be declare using var i.e const obj = {}; const obj.foo = 'hi'; //error-> omit the var keyword
3. Bad keywords: using keywords of other prgmg language

SyntaxError: missing ) after argument list
1. typo
2. missing operator
3. unescaped string

SyntaxError: Unexpected token
1. expression expected: trailing commas error, etc
2. Not enough brackets

SyntaxError: unterminated string literal
1. not closing string literals properly
2. multiple lines: string can't be split into multiple lines without using operator, a backlash, or template operator to concat those lines

template literal or string syntax:
1. `string text`

2. `string text line 1
 string text line 2`

3. `string ${expression} string`

4. tagFunction`string text ${expression} string text`


A string literal is zero or more characters enclosed in double (") or single (') quotation marks.


=== compares values and datatypes
== compares only values


to convert variable value to string
numToString = num.toString();
to convert string data to number
stringToNum = Number(numToString);


Useful string Method
1. finding the length of a string 
const rect = 'rectangle'
rect.length ->9

2. Retrieving a specific string character
rect[7] -> 'l'
rect[rect.length-1] -> e

3. Testing if a string contains a substring
rect.includes('le') -> true
rect.startsWith('le') -> false
rect.endsWith('le') -> true
4. Finding the position of a substring in a string
rect.indexOf('le') -> 7
const tagline = 'MDN - Resources for developers, by developers';
const firstOccurrence = tagline.indexOf('developers');
const secondOccurrence = tagline.indexOf('developers', firstOccurrence + 1);

console.log(firstOccurrence); // 20
console.log(secondOccurrence); // 35

5.Extracting a substring from a string
const browserType = 'mozilla';
console.log(browserType.slice(1, 4)); // "ozi"
browserType.slice(2); //"zilla"

6. Changing case
const radData = 'My naMe Is Mud';
console.log(radData.toLowerCase());
console.log(radData.toUpperCase());

7. Updating parts of a string
const browserType = 'mozilla';
Only changes 1st occurence of substring:
const updated = browserType.replace('moz','van');

console.log(updated);      // "vanilla"
console.log(browserType);  // "mozilla"
if want to replace in original string :
browserType = browserType.replace('moz','van');

console.log(browserType);  // "vanilla"

if want to change all occurences of substring then use replaceAll():
let quote = 'To be or not to be';
quote = quote.replaceAll('be', 'code');
console.log(quote);  //"To code or not to code"



ARRAY
1. Finding the length of an array
const shopping = ['bread', 'milk', 'cheese', 'hummus', 'noodles'];
console.log(shopping).length;

2. Accessing and modifying array items
const shopping = ['bread', 'milk', 'cheese', 'hummus', 'noodles'];
console.log(shopping[0]); // returns "bread"

shopping[0] = "tahini";
console.log(shopping); //// shopping will now return [ "tahini", "milk", "cheese", "hummus", "noodles" ]

Array inside an array is called a multidimensional array. 
const random = ['tree', 795, [0, 1, 2]];
random[2][2];  //2
random[1][0]; //undefined
random[0][0];// 't'

3. Finding items in an array
const birds = ['Parrot', 'Falcon', 'Owl'];
console.log(birds.indexOf('Owl'));   //  2
console.log(birds.indexOf('Rabbit')); // -1

4. Adding items
const cities = ['Manchester', 'Liverpool'];
cities.push('Cardiff');
console.log(cities);      // [ "Manchester", "Liverpool", "Cardiff" ]
cities.push('Bradford', 'Brighton');
console.log(cities);      // [ "Manchester", "Liverpool", "Cardiff", "Bradford", "Brighton" ]

To add an item to the start of the array,
const cities = ['Manchester', 'Liverpool'];
cities.unshift('Edinburgh');
console.log(cities);     // [ "Edinburgh", "Manchester", "Liverpool" ]

5. Removing items
To remove the last item from the array
const cities = ['Manchester', 'Liverpool'];
cities.pop();
console.log(cities.pop()); //Liverpool
console.log(cities);     // [ "Manchester" ]

To remove the first item from an array,
const cities = ['Manchester', 'Liverpool'];
cities.shift();
console.log(cities);     // [ "Liverpool" ]

If index of an item is known splice() can be used
const cities = ['Manchester', 'Liverpool', 'Edinburgh', 'Carlisle'];
const index = cities.indexOf('Liverpool');
if (index !== -1) {
  cities.splice(index, 1);
}
console.log(cities);     // [ "Manchester", "Edinburgh", "Carlisle" ]

in splice() 1st argument: index from where item is removed, 2nd argument how many items to remove bydefault rest all is set
const index = cities.indexOf('Liverpool');
if (index !== -1) {
  cities.splice(index, 2);
}
console.log(cities);     // [ "Manchester", "Carlisle" ]

5. Accessing every item
for...of statement to access all items in an array
const birds = ['Parrot', 'Falcon', 'Owl'];
for (const bird of birds) {
	console.log(bird);
}

if has to perform same operation on each item of an array resulting in an array containing the changed  item map() is used
function double(number) {
	return number*2;
}
const numbers = [5, 2, 7, 6];
const doubled = numbers.map(double);
console.log(doubled);  // [ 10, 4, 14, 12 ]

const numbers = [1, 4, 9, 16]
numbers.map(x => x * 2)  //[2, 8, 18, 32]

if has to create an array from original one containing only items that pass some test. filter() is used
function isLong(city) {
  return city.length > 8;
}
const cities = ['London', 'Liverpool', 'Totnes', 'Edinburgh'];
const longer = cities.filter(isLong);
console.log(longer);  // [ "Liverpool", "Edinburgh" ]

const words = ["thaw", "achievement", "gain", "outlet", "difference"] //["thaw", "gain"]
words.filter(word => word.length < 5)

6. Converting between strings and arrays
converting string to array
const data = 'Manchester,London,Liverpool,Birmingham,Leeds,Carlisle';
const cities = data.split(',');
cities;  //['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle']
cities.length;  //6
cities[0]; // "Manchester"
cities[1]; // "London"
cities[cities.length - 1]; // "Carlisle"

to convert into a string
const commaSeparated = cities.join(',');
commaSeparated;   //'Manchester,London,Liverpool,Birmingham,Leeds,Carlisle'
const commaSeparated = cities.join(',');    //'Manchester.London.Liverpool.Birmingham.Leeds.Carlisle'

tostring() works same as join()  but it does take any argument n only works for ,
const dogNames = ['Rocket','Flash','Bella','Slugger'];
dogNames.toString(); // Rocket,Flash,Bella,Slugger



